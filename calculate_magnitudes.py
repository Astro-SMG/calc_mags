'''##########################################################################################################################################################################################################################################################################################This program obtains any magnitudes for an input spectrumVersion 1.0Only Vega as zero-pointS. Meneses-Goytia, 2013Kapteyn Instituut, Groningen, NLVersion 1.1Adapted to calculate any magnitudes using the option of AB as zero-pointS. Meneses-Goytia, 2016Institute of Cosmology and Gravitation - University of Portsmouth,                                         Portsmouth, UK                                         Version 1.2Adapted from idl to pythonS. Meneses-Goytia, 2017Institute of Cosmology and Gravitation - University of Portsmouth,                                         Portsmouth, UKinput:      ws - wavelength array of a spectrum      fs - linear flux array of a spectrum      flist - lists of filters      zeropoint - zero point to be used, 'Vega' or 'AB'      zspec - the redshift of the spectrumoutput:       fmag  - array with all magnitudes from the filter list##########################################################################################################################################################################################################################################################################################'''########################################################################################################################################################################################################################################################################################### importing packages and librariesimport pandas as pdimport numpy as np##################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################### function that shifts the spectrumdef shift(key, array):    return np.roll(array,key).tolist()##################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################### main routinedef calculate_magnitudes(ws,fs,flist,zeropoint,zspec):    ##### folders environment setup #####    datadir = '/mnt/lustre/smg/programs/'    ##### setting up variables #####    cvel=2.99792e+18           #speed of light in Angstrom/s    ABflux_nu=3.631e-20        #flux of AB=0 star in ergs/s/cm^2/Hz    ##### using Vega spectrum alpha lyr by default but it can be modified to used the other available #####    if(zeropoint == 'Vega' or zeropoint == 'vega'): flagVega = '1'    ##### read filters list and determining the number of filters within it #####    filters = datadir+'filters/'+flist    filters_table = pd.read_table(filters, header=None ,usecols=[0,1], names=['prev_wf','prev_rf'], delim_whitespace=True)    prev_wf = np.array(filters_table['prev_wf'].values)    prev_rf = np.array(filters_table['prev_rf'].values)        nlines_all=np.zeros(50)    total_filters = 0        for i in range(0,len(prev_wf)):        if (prev_wf[i][0] == '#'):total_filters = total_filters + 1        else: nlines_all[total_filters-1]=nlines_all[total_filters-1]+1     max_nlines = int(max(nlines_all))    total_filters = int(total_filters)    wf=np.zeros((max_nlines,total_filters))    rf=np.zeros((max_nlines,total_filters))    file = open(filters, 'r')    for i in range(0,total_filters):        line = file.readline()        for j in range(0,int(nlines_all[i])):                line = file.readline()                #num_flt = map(float, line.split())
                num_flt = str.split(line)
                #print(test[0])                wf[j,i]=float(num_flt[0])                rf[j,i]=float(num_flt[1])    ##### read vega fluxes #####    if(zeropoint == 'Vega' or zeropoint == 'vega'):        if(flagVega == '1'): vname = datadir+'vega_sed'+'/alpha_lyr_005.sed'        if(flagVega == '2'): vname = datadir+'vega_sed'+'/vega_ck94.sed'        if(flagVega == '3'): vname = datadir+'vega_sed'+'/vega_hayes85.sed'        if(flagVega == '4'): vname = datadir+'vega_sed'+'/vega_from_koo.sed'        if(flagVega == 'a' or flagVega == 'A'): vname = datadir+'vega_sed'+'/vega_from_koo.sed'            wv, fv = np.loadtxt(vname,unpack=True)        if(flagVega == '3'):fv = 10**(-0.4*fv)        calpoint=5556.0        zp5556=3.44e-9 #erg cm^-2 s^-1 A^-1, Hayes 1985        calflux = np.interp(calpoint,wv,fv,wv)        scalef = zp5556 / calflux        fv = fv**scalef    ##### computing the magnitudes #####    fmag = np.zeros(total_filters,dtype=np.float64)    ##### unit conversion #####    dl = 1.0e-5 # 10 pc in Mpc and corrected for the factor 10 due to the fact that formula is 5*log10(d(pc))-5., z=0; for absolute magnitudes    cfact = 5*np.log10(1.7684e+08*dl) # from lum[erg/s/A] to flux [erg/s/A/cm2]    ##### inverse k-correction (Hogg et al. 2002) #####    ws = ws * (1 + zspec)     fs = fs / (1 + zspec)    ##### compute midpoint and size of each wavelength bin #####    dx_s = abs(ws - shift(-1,ws))    wmid_s = 0.5*(ws + shift(-1,ws))    if(zeropoint == 'Vega' or zeropoint == 'vega'):        dx_v = abs(wv - shift(-1,wv))        wmid_v = 0.5*(wv + shift(-1,wv))    ##### create a spectrum for AB magnitudes #####    if(zeropoint == 'AB' or zeropoint == 'ab'):        f_AB = (fs*0.) + ABflux_nu        f_AB_lam = f_AB * cvel / (wmid_s**2.)      ##### running things for each filter and checking if the filter is computable for this spectrum #####    for jj in range(0,total_filters):        if(wf[0,jj] >= min(ws) and wf[int(nlines_all[jj])-1, jj] <= max(ws)):            dsum1 = 0.0            dsum2 = 0.0            dsum3 = 0.0            ##### get total flux in input spectrum ######            good_s, = np.where((ws >= wf[0, jj]) & (ws <= wf[int(nlines_all[jj])-1, jj]))            win = wmid_s[good_s]            fin = fs[good_s]            dx = dx_s[good_s]            filt_s = np.interp(win,wf[0:int(nlines_all[jj])-1,jj],rf[0:int(nlines_all[jj])-1,jj])            dsum1 = np.sum(win*fin*filt_s*dx)            if(zeropoint == 'AB' or zeropoint == 'ab'):                fin_AB = f_AB_lam[good_s]                dsumAB = np.sum(win*fin_AB*filt_s*dx)                    ##### get total flux in Vega spectrum if zero point is Vega #####            if(zeropoint == 'Vega' or zeropoint == 'vega'):                good_v,=where((wv >= wf(0, jj)) & (wv <= wf(int(nlines_all(jj))-1, jj)))                if(good_v(0) == -1 and n_elements(good_v) == 1):                    print('ERROR: Vega spectrum has shorter wavelength than the signal spectrum')                    exit()                win = wmid_v[good_v]                fin = fv[good_v]                dx = dx_v[good_v]                filt_v = np.interp(win,wf[0:int(nlines_all[jj])-1,jj],rf[0:int(nlines_all[jj])-1,jj])                dsumvega = np.sum(win*fin*filt_v*dx)            if(zeropoint == 'Vega' or zeropoint == 'vega'): mag=-2.50*np.log10(dsum1/dsumvega)+0.026 # Add 0.026 because Vega has V=0.026 and not zero (e.g. Bohlin & Gilliland 2004)            if(zeropoint == 'AB' or zeropoint == 'ab'): mag = -2.50*np.log10(dsum1/dsumAB)            ##### k-shift (distance shift) to 10pc by adding cfact= (5.*alog10(1.7684e+08*dl)) #####            ##### this factor is SQRT(4*pi*(3.0856E24)^2/Lsun), in which 3.0856E24 is a Mpc in cm] where dl should be in Mpc #####            #fmag(jj)= mag+cfact            fmag[jj]= mag            if(zeropoint == 'Vega' or zeropoint == 'vega'):                if(flagVega == 'A' or flagVega == 'a'): fmag[jj]=fmag[jj]+2.50*np.log10(2.99792458e18)-48.60 # oke & gunn 83        else: fmag[jj] = -99.999    return fmag#############################################################################################################################################
